akka.cluster.roles=[${?ROLE}]

akka.cluster.sharding.role = ${SHARD_ROLE}

stash-capacity-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
  stash-capacity = 20
}

cassandra-journal {
  contact-points = [${?CASS}]
}

akka.actor.serialization-bindings {
  "java.io.Serializable" = none
}

akka.cluster.sharding.state-store-mode = persistence

my-blocking-dispatcher-1 {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

my-blocking-dispatcher-2 {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}


akka {
  actor {

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "app.messages.Balance" = proto
      "app.messages.GetTransactionStatus" = proto
      "app.messages.TransactionStatus" = proto
      "app.messages.ChangeBalance" = proto
      "app.messages.BalanceChanged" = proto
      "app.messages.IsLocked" = proto
      "app.messages.GetBalance" = proto
      "app.messages.MoneyTransaction" = proto
      "app.messages.AckRollback" = proto
      "app.messages.AckCommit" = proto
      "app.messages.AckFinalize" = proto
      "app.messages.Commit" = proto
      "app.messages.Rollback" = proto
      "app.messages.Finalize" = proto
      "app.messages.Accepted" = proto
      "app.messages.Rejected" = proto
      "app.messages.Vote" = proto
      "app.messages.Abort" = proto
      "app.messages.Finalizing" = proto
      "app.messages.Rollingback" = proto
      "app.messages.AccountStashOverflow" = proto
      "app.messages.Yes" = proto
      "app.messages.No" = proto
    }
  }
}


akka {
  persistence {
    journal {
      plugin = "cassandra-journal"
    }
  }
}

akka {

  logger-startup-timeout = 10s
  loglevel = "INFO"

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    netty.tcp {
      hostnmame = 127.0.0.1
      hostname = ${?POD_IP}
      port = 2551
      port = ${?CLUSTERING_PORT}
    }
  }

}

akka.cluster.metrics.enabled = off

akka.extensions = [de.heikoseeberger.constructr.ConstructrExtension]

constructr {
  coordination {
    host = localhost
    host = ${?ETCD_SERVICE_HOST}
    port = 2379
  }
}

cinnamon.application = "hello-akka"

cinnamon.akka {
  actors {
    "app.AccountActor" {
      report-by = class
      thresholds {
        mailbox-size = 10
        stash-size = 3
      }
    }
    "app.Coordinator" {
      report-by = class
    }
    "/user/*" {
      report-by = class
    }
  }
}

cinnamon.chmetrics {

  registrants += "cinnamon.chmetrics.jvm-metrics"

  reporters += "statsd-reporter"

  statsd-reporter {
    host = "localhost"
    host = ${?SD_SERVICE_HOST}
    port = 8125
  }
}

cinnamon.akka.http.servers {
  "*:*" {
    paths {
      "*" {
        metrics = on
      }
    }
  }
}

akka.persistence.max-concurrent-recoveries = 2147483647
