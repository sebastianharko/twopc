stash-capacity-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
  stash-capacity = 5
}

cassandra-journal {
  contact-points = ["cassandra-0.cassandra.default.svc.cluster.local"]
}

akka.scheduler.tick-duration = 1ms

akka {

  persistence {

    journal {
      plugin = "cassandra-journal"
      auto-start-journals = ["cassandra-journal"]
    }

  }

}

akka {

  logger-startup-timeout = 10s

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      json = "app.EventSerialization"
    }

    serialization-bindings {
      "app.ChangeBalance" = json
      "app.BalanceChanged" = json
      "app.IsLocked" = json
      "app.GetBalance" = json
      "app.MoneyTransaction" = json
      "app.AckRollback" = json
      "app.AckCommit" = json
      "app.AckFinalize" = json
      "app.Commit" = json
      "app.Rollback" = json
      "app.Finalize" = json
      "app.Accepted" = json
      "app.Rejected" = json
      "app.Vote" = json
      "app.Abort" = json
      "app.Finalizing" = json
      "app.Rollingback" = json
      "app.Check" = json
      "app.StartFinalize$" = json
      "app.StartRollback$" = json
      "app.StartVotingProcess$" = json
      "app.AccountStashOverflow" = json

    }


  }

  remote {
    netty.tcp {
      hostnmame = 127.0.0.1
      hostname = ${?POD_IP}
      port = ${clustering.port}
    }
  }

}

clustering {
  port = 2551
}

akka.cluster.http.management.hostname = ${management.ip}
akka.cluster.http.management.port = ${management.port}

management {
  ip = "0.0.0.0"
  port = 19999
}

akka.cluster.metrics.enabled=off

akka.extensions = [de.heikoseeberger.constructr.ConstructrExtension, akka.persistence.Persistence]

constructr {
  coordination {
    host = localhost
    host = ${?ETCD_SERVICE_HOST}
    port = 2379
  }
}

sharding-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}


akka.cluster.sharding {
  buffer-size = 1000
  use-dispatcher = "sharding-dispatcher"
}

cinnamon.application = "hello-akka"

cinnamon.akka {
  actors {
    "app.AccountActor" {
      report-by = class
      thresholds {
        mailbox-size = 10
        stash-size = 3
      }
    }
    "app.Coordinator" {
      report-by = class
    }
    "/user/*" {
      report-by = class
    }
  }
}

cinnamon.chmetrics {

  registrants += "cinnamon.chmetrics.jvm-metrics"

  reporters += "statsd-reporter"

  statsd-reporter {
    host = "localhost"
    host = ${?SD_SERVICE_HOST}
    port = 8125
  }
}

cinnamon.akka.http.servers {
  "*:*" {
    paths {
      "*" {
        metrics = on
      }
    }
  }
}

akka.persistence.max-concurrent-recoveries = 100
